function [] = fullRXD(audioFile, frameOverlapPercentage, frameDuration, methodFlag)
%UNTITLED Summary of this function goes here
%   Detailed explanation goes here
[audioData,sampleRate, frameLength, frameOverlapLength, frameOverlapDuration] = extract_audio_data(audioFile,frameOverlapPercentage, frameDuration);
sampleRate
frameLength
%audioData = normalize(audioData);

N = 10; %left and right cells to average - used for removing noise

switch methodFlag
    case "FFT"
        coeffsFFT = calculateFFT(audioData, frameLength, frameOverlapLength);
        anomalyVectorFFT = calculateMahalanobis(coeffsFFT);
        anomalyVectorFFTnorm = normalize(anomalyVectorFFT, 'range');
        [thresholdedDataFFT,sFFT] = get_threshold(anomalyVectorFFT);
        cleanedAnomaliesFFT = cleanAnomalies(thresholdedDataFFT, sFFT, N);
    case "MFCC"
        




%FFT


%mel Spectorgram
[coeffsMEL, ~, ~] = melSpectrogram(audioData, sampleRate, 'WindowLength', frameLength, 'OverlapLength', frameOverlapLength);
coeffsMEL = coeffsMEL'; % melSpectrogram does coloums as frames so must be transposed.

%mfcc
[coeffsMFCC, delta, deltaDelta, loc] = mfcc(audioData, sampleRate, 'WindowLength', frameLength, 'OverlapLength', frameOverlapLength, LogEnergy='append');

anomalyVectorMEL = calculateMahalanobis(coeffsMEL);
anomalyVectorMFCC = calculateMahalanobis(coeffsMFCC);

%normaize:
anomalyVectorMELnorm = normalize(anomalyVectorMEL, 'range');
anomalyVectorMFCCnorm = normalize(anomalyVectorMFCC, 'range');

%plot thresholded data 
[thresholdedDataMEL,sMEL] = get_threshold(anomalyVectorMEL);
[thresholdedDataMFCC,sMFCC] = get_threshold(anomalyVectorMFCC);

%remove noise from detected anomalies

cleanedAnomaliesMEL = cleanAnomalies(thresholdedDataMEL, sMEL, N);
cleanedAnomaliesMFCC = cleanAnomalies(thresholdedDataMFCC,sMFCC, N);

%summing =  (1/3).*((0.5.*anomalyVectorFFTnorm ) + anomalyVectorMELnorm + anomalyVectorMFCCnorm );
%figure, plot(summing), title('sum');


% %Following comment is to converge the domains.
% fft = anomalyVectorFFT;
% MFCC = anomalyVectorMEL;
% mel = anomalyVectorMFCC;
% result = conv(fft, MFCC, 'full');
% allDomains = conv(result, mel, 'full'); 
% figure, plot(allDomains), title('all domains!!');
% 
% allDomains2 = fft.*MFCC.*mel;
% figure, plot(allDomains2), title('all domains 2 !!');


numberOfFrames = size(coeffsMFCC,1);
timeArray = getTimeArray(numberOfFrames, frameDuration, frameOverlapDuration);


%plotAnomalyScores(timeArray, anomalyVectorFFTnorm)
%plotAnomalyScores(timeArray(12:end), anomalyVectorMELnorm(12:end))
%plotAnomalyScores(timeArray, anomalyVectorMFCCnorm)


end